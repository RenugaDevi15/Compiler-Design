#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_PRODUCTIONS 10
#define MAX_RULE_LENGTH 100

void eliminateLeftFactoring(char nonTerminal, char productions[MAX_PRODUCTIONS][MAX_RULE_LENGTH], int numProductions) {
    char newNonTerminal = nonTerminal + 1;
    
    printf("\nEliminated Grammar:\n");
    
    for (int i = 0; i < numProductions; i++) {
        for (int j = i + 1; j < numProductions; j++) {
            int k = 0;
            while (productions[i][k] == productions[j][k] && productions[i][k] != '\0' && productions[j][k] != '\0') {
                k++;
            }
            
            if (k > 0) {
                char commonPrefix[MAX_RULE_LENGTH];
                strncpy(commonPrefix, productions[i], k);
                commonPrefix[k] = '\0';
                
                char suffix1[MAX_RULE_LENGTH], suffix2[MAX_RULE_LENGTH];
                strcpy(suffix1, productions[i] + k);
                strcpy(suffix2, productions[j] + k);
                
                printf("%c -> %s%c\n", nonTerminal, commonPrefix, newNonTerminal);
                printf("%c -> %s | %s\n", newNonTerminal, suffix1, suffix2);
                
                return;
            }
        }
    }
    
    for (int i = 0; i < numProductions; i++) {
        printf("%c -> %s\n", nonTerminal, productions[i]);
    }
}

int main() {
    char nonTerminal;
    char productions[MAX_PRODUCTIONS][MAX_RULE_LENGTH];
    int numProductions;
    
    printf("Enter the non-terminal: ");
    scanf(" %c", &nonTerminal);
    
    printf("Enter the number of productions: ");
    scanf("%d", &numProductions);
    
    printf("Enter the productions for %c:\n", nonTerminal);
    for (int i = 0; i < numProductions; i++) {
        printf("Production %d: ", i + 1);
        scanf(" %[^\n]", productions[i]);
    }
    
    eliminateLeftFactoring(nonTerminal, productions, numProductions);
    
    return 0;
}
