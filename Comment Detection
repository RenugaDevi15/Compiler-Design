#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX_LEN 100 // Maximum length for an identifier

// Function prototypes
void getNextToken(FILE *source);
void skipWhitespaceAndComments(FILE *source);
void processIdentifier(FILE *source);
void processConstant(FILE *source);
void processOperator(FILE *source);
int isSingleLineComment(FILE *source);
int isMultiLineComment(FILE *source);

// Global variables to hold the current token
char token[MAX_LEN];
int tokenIndex = 0;

int main() {
    FILE *source;
    char fileName[50];

    printf("Enter the source file name: ");
    scanf("%s", fileName);

    source = fopen(fileName, "r");

    if (source == NULL) {
        printf("Error opening file\n");
        return 1;
    }

    // Read each line and process it
    while (!feof(source)) {
        skipWhitespaceAndComments(source); // Skip spaces, tabs, newlines, and comments

        if (feof(source)) break;

        // Check if the token is an identifier
        if (isalpha(token[0]) || token[0] == '_') {
            processIdentifier(source);
            printf("Identifier: %s\n", token);
        }
        // Check if the token is a constant (integer or float)
        else if (isdigit(token[0])) {
            processConstant(source);
            printf("Constant: %s\n", token);
        }
        // Check if the token is an operator
        else if (strchr("+-*/=<>!&|", token[0])) {
            processOperator(source);
            printf("Operator: %s\n", token);
        }
        else {
            token[0] = '\0'; // Reset token if it doesn't match any category
        }
    }

    fclose(source);
    return 0;
}

// Function to skip whitespace, tabs, new lines, and comments
void skipWhitespaceAndComments(FILE *source) {
    int ch;
    tokenIndex = 0; // Reset token index

    // Skip spaces, tabs, and newlines
    while ((ch = fgetc(source)) != EOF && (ch == ' ' || ch == '\t' || ch == '\n')) {
        // Do nothing
    }

    // Check for comments
    if (ch == '/') {
        ch = fgetc(source);
        if (ch == '/') { // Single-line comment
            while ((ch = fgetc(source)) != EOF && ch != '\n') {
                // Do nothing (skip the line)
            }
            // Mark that we've processed a comment
            printf("Single-line comment detected\n");
        } else if (ch == '*') { // Multi-line comment
            while ((ch = fgetc(source)) != EOF) {
                if (ch == '*' && (ch = fgetc(source)) == '/') {
                    break; // End of multi-line comment
                }
            }
            // Mark that we've processed a multi-line comment
            printf("Multi-line comment detected\n");
        } else {
            ungetc(ch, source); // Not a comment, return character
        }
    }

    // Read the next non-whitespace character into the token buffer
    if (ch != EOF) {
        token[tokenIndex++] = ch;
        token[tokenIndex] = '\0'; // Null-terminate the string
    }
}

// Function to process an identifier
void processIdentifier(FILE *source) {
    int ch;
    tokenIndex = 1; // First character already in token[0]

    while ((ch = fgetc(source)) != EOF && (isalnum(ch) || ch == '_')) {
        if (tokenIndex < MAX_LEN - 1) {
            token[tokenIndex++] = ch;
            token[tokenIndex] = '\0'; // Null-terminate the string
        }
    }

    ungetc(ch, source); // Return the last read character to the input stream
}

// Function to process a constant (integer or float)
void processConstant(FILE *source) {
    int ch;
    tokenIndex = 1; // First character already in token[0]

    while ((ch = fgetc(source)) != EOF && (isdigit(ch) || ch == '.')) {
        if (tokenIndex < MAX_LEN - 1) {
            token[tokenIndex++] = ch;
            token[tokenIndex] = '\0'; // Null-terminate the string
        }
    }

    ungetc(ch, source); // Return the last read character to the input stream
}

// Function to process an operator
void processOperator(FILE *source) {
    int ch;
    tokenIndex = 1; // First character already in token[0]

    // Operators could be a single or double character like '==' or '!='
    if ((ch = fgetc(source)) != EOF) {
        token[tokenIndex++] = ch;
        token[tokenIndex] = '\0'; // Null-terminate the string
    }
}
